// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Repositories;

namespace Migrations.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210310095948_UpdateDBDesign")]
    partial class UpdateDBDesign
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.AcademicInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("BoardId")
                        .HasColumnType("int");

                    b.Property<int>("ExamTypeId")
                        .HasColumnType("int");

                    b.Property<float>("GPA")
                        .HasColumnType("float");

                    b.Property<int>("PassingYearId")
                        .HasColumnType("int");

                    b.Property<string>("RegNumber")
                        .HasColumnType("text");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BoardId");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("PassingYearId");

                    b.HasIndex("StudentId");

                    b.ToTable("AcademicInfos");
                });

            modelBuilder.Entity("Models.Board", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("BoardName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("Models.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("MainExamNames")
                        .HasColumnType("text");

                    b.Property<string>("SubExamNames")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ExamTypes");
                });

            modelBuilder.Entity("Models.PassingYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PassingYears");
                });

            modelBuilder.Entity("Models.Programs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ProgramName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Programss");
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ContactNo")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FatherName")
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<string>("GuardianContactNo")
                        .HasColumnType("text");

                    b.Property<string>("GuardianName")
                        .HasColumnType("text");

                    b.Property<string>("ImagePath")
                        .HasColumnType("text");

                    b.Property<string>("MotherName")
                        .HasColumnType("text");

                    b.Property<string>("NationalId")
                        .HasColumnType("text");

                    b.Property<string>("PresentAddress")
                        .HasColumnType("text");

                    b.Property<int>("ProgramsId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("ProgramsId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("Models.AcademicInfo", b =>
                {
                    b.HasOne("Models.Board", "Board")
                        .WithMany("AcademicInfos")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.ExamType", "ExamType")
                        .WithMany()
                        .HasForeignKey("ExamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.PassingYear", "PassingYear")
                        .WithMany("AcademicInfos")
                        .HasForeignKey("PassingYearId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Student", "Student")
                        .WithMany("AcademicInfo")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Student", b =>
                {
                    b.HasOne("Models.Programs", "Programs")
                        .WithMany("Students")
                        .HasForeignKey("ProgramsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
